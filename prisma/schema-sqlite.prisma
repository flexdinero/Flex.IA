generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @default(cuid())
  email             String       @unique
  firstName         String
  lastName          String
  phone             String?
  profileImage      String?
  hashedPassword    String?
  role              String       @default("ADJUSTER")
  isActive          Boolean      @default(true)
  emailVerified     Boolean      @default(false)
  twoFactorEnabled  Boolean      @default(false)
  twoFactorSecret   String?
  
  // Adjuster specific fields
  licenseNumber     String?
  certifications    String?      // JSON string
  specialties       String?      // JSON string
  yearsExperience   Int?
  hourlyRate        Float?
  travelRadius      Int?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  
  // Timestamps
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  lastLoginAt       DateTime?
  
  // Relations
  sessions          Session[]
  tokens            Token[]
  claims            Claim[]
  sentMessages      Message[]    @relation("MessageSender")
  receivedMessages  Message[]    @relation("MessageRecipient")
  earnings          Earning[]
  notifications     Notification[]
  calendar          CalendarEvent[]

  @@map("users")
}

model Session {
  id                String   @id @default(cuid())
  userId            String
  expiresAt         DateTime
  handle            String   @unique
  hashedSessionToken String?
  antiCSRFToken     String?
  publicData        String?
  privateData       String?
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model Token {
  id          String    @id @default(cuid())
  userId      String
  type        String    // RESET_PASSWORD, VERIFY_EMAIL, TWO_FACTOR
  hashedToken String
  expiresAt   DateTime
  sentTo      String
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([hashedToken, type])
  @@map("tokens")
}

model Firm {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  phone           String?
  website         String?
  description     String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  logo            String?
  isActive        Boolean   @default(true)
  specialties     String?   // JSON string
  rating          Float?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  claims          Claim[]
  messages        Message[]

  @@map("firms")
}

model Claim {
  id              String        @id @default(cuid())
  claimNumber     String        @unique
  title           String
  description     String?
  type            String        // PROPERTY_DAMAGE, AUTO_COLLISION, etc.
  status          String        @default("AVAILABLE")
  priority        String        @default("MEDIUM")
  
  // Financial
  estimatedValue  Float?
  finalValue      Float?
  adjusterFee     Float?
  
  // Location
  address         String
  city            String
  state           String
  zipCode         String
  coordinates     String?       // lat,lng
  
  // Dates
  incidentDate    DateTime
  reportedDate    DateTime
  deadline        DateTime
  completedAt     DateTime?
  
  // Assignment
  firmId          String
  adjusterId      String?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  firm            Firm          @relation(fields: [firmId], references: [id])
  adjuster        User?         @relation(fields: [adjusterId], references: [id])
  messages        Message[]
  earnings        Earning[]
  calendar        CalendarEvent[]

  @@map("claims")
}

model Message {
  id              String      @id @default(cuid())
  subject         String?
  content         String
  isRead          Boolean     @default(false)
  priority        String      @default("MEDIUM")
  
  // Relations
  senderId        String
  recipientId     String
  firmId          String?
  claimId         String?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  sender          User        @relation("MessageSender", fields: [senderId], references: [id])
  recipient       User        @relation("MessageRecipient", fields: [recipientId], references: [id])
  firm            Firm?       @relation(fields: [firmId], references: [id])
  claim           Claim?      @relation(fields: [claimId], references: [id])

  @@map("messages")
}

model Earning {
  id              String        @id @default(cuid())
  amount          Float
  type            String        // CLAIM_FEE, HOURLY_WORK, etc.
  status          String        @default("PENDING")
  description     String?
  
  // Dates
  earnedDate      DateTime
  paidDate        DateTime?
  
  // Relations
  userId          String
  claimId         String?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  user            User          @relation(fields: [userId], references: [id])
  claim           Claim?        @relation(fields: [claimId], references: [id])

  @@map("earnings")
}

model CalendarEvent {
  id              String           @id @default(cuid())
  title           String
  description     String?
  type            String           // INSPECTION, MEETING, etc.
  status          String           @default("SCHEDULED")
  
  // Time
  startTime       DateTime
  endTime         DateTime
  isAllDay        Boolean          @default(false)
  
  // Location
  address         String?
  city            String?
  state           String?
  zipCode         String?
  
  // Relations
  userId          String
  claimId         String?
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  user            User             @relation(fields: [userId], references: [id])
  claim           Claim?           @relation(fields: [claimId], references: [id])

  @@map("calendar_events")
}

model Notification {
  id              String            @id @default(cuid())
  title           String
  content         String
  type            String            // CLAIM_ASSIGNED, PAYMENT_RECEIVED, etc.
  isRead          Boolean           @default(false)
  
  // Relations
  userId          String
  
  createdAt       DateTime          @default(now())
  
  user            User              @relation(fields: [userId], references: [id])

  @@map("notifications")
}
