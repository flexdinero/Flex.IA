generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Note: SQLite doesn't support enums, using String with defaults
// Valid UserRole values: ADMIN, ADJUSTER, FIRM
// Valid ClaimStatus values: AVAILABLE, ASSIGNED, IN_PROGRESS, COMPLETED, CANCELLED
// Valid ClaimType values: AUTO_COLLISION, PROPERTY_DAMAGE, FIRE_DAMAGE, WATER_DAMAGE, THEFT, VANDALISM, NATURAL_DISASTER, LIABILITY, WORKERS_COMP, OTHER
// Valid Priority values: LOW, MEDIUM, HIGH, URGENT
// Valid NotificationType values: CLAIM_ASSIGNED, CLAIM_UPDATED, PAYMENT_RECEIVED, MESSAGE_RECEIVED, SYSTEM_ALERT, REMINDER, etc.

model User {
  id                String       @id @default(cuid())
  email             String       @unique
  firstName         String
  lastName          String
  phone             String?
  profileImage      String?
  hashedPassword    String?
  role              String       @default("ADJUSTER")
  isActive          Boolean      @default(true)
  emailVerified     Boolean      @default(false)
  twoFactorEnabled  Boolean      @default(false)
  twoFactorSecret   String?
  
  // Adjuster specific fields
  licenseNumber     String?
  certifications    String?      // JSON string
  specialties       String?      // JSON string
  yearsExperience   Int?
  hourlyRate        Float?
  travelRadius      Int?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  
  // Billing & Subscription
  stripeCustomerId              String?   @unique
  stripeSubscriptionId          String?
  subscriptionStatus            String?
  subscriptionPlan              String?
  subscriptionCurrentPeriodEnd  DateTime?
  subscriptionCancelAtPeriodEnd Boolean?  @default(false)

  // Timestamps
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  lastLoginAt       DateTime?

  // Relations
  sessions          Session[]
  tokens            Token[]
  claims            Claim[]
  sentMessages      Message[]    @relation("MessageSender")
  receivedMessages  Message[]    @relation("MessageRecipient")
  earnings          Earning[]
  notifications     Notification[]
  calendar          CalendarEvent[]
  subscriptions     Subscription[]
  payments          Payment[]
  firmConnections   FirmConnection[]
  documents         Document[]
  supportTickets    SupportTicket[] @relation("UserSupportTickets")
  assignedTickets   SupportTicket[] @relation("AssignedSupportTickets")
  supportMessages   SupportMessage[] @relation("SupportMessages")
  affiliatePartner  AffiliatePartner?
  affiliateReferrals AffiliateReferral[] @relation("AffiliateReferrals")
  chatSessions      ChatSession[]

  @@map("users")
}

model Session {
  id                String   @id @default(cuid())
  userId            String
  expiresAt         DateTime
  handle            String   @unique
  hashedSessionToken String?
  antiCSRFToken     String?
  publicData        String?
  privateData       String?
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model Token {
  id          String    @id @default(cuid())
  userId      String
  type        String    // RESET_PASSWORD, VERIFY_EMAIL, TWO_FACTOR
  hashedToken String
  expiresAt   DateTime
  sentTo      String
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([hashedToken, type])
  @@map("tokens")
}

model Firm {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  phone           String?
  website         String?
  description     String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  logo            String?
  isActive        Boolean   @default(true)
  specialties     String?   // JSON string
  rating          Float?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  claims          Claim[]
  messages        Message[]
  connections     FirmConnection[]
  automationLogs  AutomationLog[]

  @@map("firms")
}

model Claim {
  id              String        @id @default(cuid())
  claimNumber     String        @unique
  title           String
  description     String?
  type            String        @default("OTHER")
  status          String        @default("AVAILABLE")
  priority        String        @default("MEDIUM")
  
  // Financial
  estimatedValue  Float?
  finalValue      Float?
  adjusterFee     Float?
  
  // Location
  address         String
  city            String
  state           String
  zipCode         String
  coordinates     String?       // lat,lng
  
  // Dates
  incidentDate    DateTime
  reportedDate    DateTime
  deadline        DateTime
  completedAt     DateTime?
  
  // Assignment
  firmId          String
  adjusterId      String?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  firm            Firm          @relation(fields: [firmId], references: [id])
  adjuster        User?         @relation(fields: [adjusterId], references: [id])
  messages        Message[]
  earnings        Earning[]
  calendar        CalendarEvent[]
  documents       Document[]

  @@map("claims")
}

model Message {
  id              String      @id @default(cuid())
  subject         String?
  content         String
  isRead          Boolean     @default(false)
  priority        String      @default("MEDIUM")
  
  // Relations
  senderId        String
  recipientId     String
  firmId          String?
  claimId         String?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  sender          User        @relation("MessageSender", fields: [senderId], references: [id])
  recipient       User        @relation("MessageRecipient", fields: [recipientId], references: [id])
  firm            Firm?       @relation(fields: [firmId], references: [id])
  claim           Claim?      @relation(fields: [claimId], references: [id])

  @@map("messages")
}

model Earning {
  id              String        @id @default(cuid())
  amount          Float
  type            String        // CLAIM_FEE, HOURLY_WORK, etc.
  status          String        @default("PENDING")
  description     String?
  
  // Dates
  earnedDate      DateTime
  paidDate        DateTime?
  
  // Relations
  userId          String
  claimId         String?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  user            User          @relation(fields: [userId], references: [id])
  claim           Claim?        @relation(fields: [claimId], references: [id])

  @@map("earnings")
}

model CalendarEvent {
  id              String           @id @default(cuid())
  title           String
  description     String?
  type            String           // INSPECTION, MEETING, etc.
  status          String           @default("SCHEDULED")
  
  // Time
  startTime       DateTime
  endTime         DateTime
  isAllDay        Boolean          @default(false)
  
  // Location
  address         String?
  city            String?
  state           String?
  zipCode         String?
  
  // Relations
  userId          String
  claimId         String?
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  user            User             @relation(fields: [userId], references: [id])
  claim           Claim?           @relation(fields: [claimId], references: [id])

  @@map("calendar_events")
}

model Notification {
  id              String            @id @default(cuid())
  title           String
  content         String
  type            String            @default("SYSTEM_ALERT")
  isRead          Boolean           @default(false)
  
  // Relations
  userId          String
  
  createdAt       DateTime          @default(now())
  
  user            User              @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Subscription {
  id                    String    @id @default(cuid())
  userId                String
  stripeSubscriptionId  String    @unique
  status                String    // active, canceled, past_due, etc.
  plan                  String    // starter, professional, enterprise
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  cancelAtPeriodEnd     Boolean   @default(false)
  canceledAt            DateTime?

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  user                  User      @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model Payment {
  id                String    @id @default(cuid())
  userId            String
  stripeInvoiceId   String?   @unique
  amount            Int       // Amount in cents
  currency          String    @default("usd")
  status            String    // succeeded, failed, pending
  description       String?
  paidAt            DateTime?

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user              User      @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  company   String?
  source    String   @default("ai-automation")
  status    String   @default("pending") // pending, contacted, converted

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waitlist")
}

model FirmConnection {
  id          String    @id @default(cuid())
  adjusterId  String
  firmId      String
  status      String    @default("PENDING") // PENDING, APPROVED, REJECTED
  message     String?
  connectedAt DateTime?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  adjuster    User      @relation(fields: [adjusterId], references: [id])
  firm        Firm      @relation(fields: [firmId], references: [id])

  @@unique([adjusterId, firmId])
  @@map("firm_connections")
}

model Document {
  id          String    @id @default(cuid())
  name        String
  description String?
  type        String    // REPORT, PHOTO, INVOICE, etc.
  fileName    String
  fileType    String
  size        Int
  url         String
  storageKey  String

  // Relations
  userId      String
  claimId     String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  claim       Claim?    @relation(fields: [claimId], references: [id])

  @@map("documents")
}

model SupportTicket {
  id            String    @id @default(cuid())
  ticketNumber  String    @unique
  subject       String
  description   String
  category      String
  priority      String    @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  status        String    @default("OPEN") // OPEN, IN_PROGRESS, RESOLVED, CLOSED

  // Relations
  userId        String
  assignedToId  String?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  resolvedAt    DateTime?
  closedAt      DateTime?

  user          User      @relation("UserSupportTickets", fields: [userId], references: [id])
  assignedTo    User?     @relation("AssignedSupportTickets", fields: [assignedToId], references: [id])
  messages      SupportMessage[]

  @@map("support_tickets")
}

model SupportMessage {
  id            String    @id @default(cuid())
  content       String
  isFromSupport Boolean   @default(false)

  // Relations
  ticketId      String
  senderId      String

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  ticket        SupportTicket @relation(fields: [ticketId], references: [id])
  sender        User          @relation("SupportMessages", fields: [senderId], references: [id])

  @@map("support_messages")
}

model AutomationLog {
  id        String   @id @default(cuid())
  type      String   // FIRM_CONNECTION, CLAIM_SUBMISSION, STATUS_CHECK
  firmId    String
  status    String   // SUCCESS, FAILED, IN_PROGRESS
  details   String
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())

  // Relations
  firm Firm @relation(fields: [firmId], references: [id], onDelete: Cascade)

  @@map("automation_logs")
}

model AffiliatePartner {
  id                String   @id @default(cuid())
  userId            String   @unique
  affiliateCode     String   @unique
  companyName       String?
  website           String?
  commissionRate    Float    @default(0.10) // 10% default
  paymentMethod     String   @default("PAYPAL") // PAYPAL, BANK_TRANSFER, CHECK
  paymentDetails    String?  // JSON string with payment info
  status            String   @default("PENDING") // PENDING, ACTIVE, SUSPENDED, TERMINATED
  totalEarnings     Float    @default(0)
  totalReferrals    Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  referrals         AffiliateReferral[]
  commissions       AffiliateCommission[]

  @@map("affiliate_partners")
}

model AffiliateReferral {
  id              String   @id @default(cuid())
  affiliateId     String
  referredUserId  String
  referralCode    String
  status          String   @default("PENDING") // PENDING, CONVERTED, CANCELLED
  conversionDate  DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  affiliate       AffiliatePartner @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  referredUser    User             @relation("AffiliateReferrals", fields: [referredUserId], references: [id], onDelete: Cascade)
  commissions     AffiliateCommission[]

  @@unique([affiliateId, referredUserId])
  @@map("affiliate_referrals")
}

model AffiliateCommission {
  id              String   @id @default(cuid())
  affiliateId     String
  referralId      String
  amount          Float
  commissionRate  Float
  status          String   @default("PENDING") // PENDING, APPROVED, PAID, CANCELLED
  paymentDate     DateTime?
  paymentMethod   String?
  paymentReference String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  affiliate       AffiliatePartner  @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  referral        AffiliateReferral @relation(fields: [referralId], references: [id], onDelete: Cascade)

  @@map("affiliate_commissions")
}

model ChatSession {
  id        String   @id @default(cuid())
  userId    String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id        String   @id @default(cuid())
  sessionId String
  role      String   // user, assistant, system
  content   String
  timestamp DateTime @default(now())

  // Relations
  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}
